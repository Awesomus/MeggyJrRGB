#include <MeggyJrSimple.h>

/*
`~Coin Collector~`

You are the blue dot
Do not hit the moving, red enemies
Collect the yellow coins

 `~Instructions~`
 Press A to begin
 Use the D-Pad to move (the arrows)
 Use the A button to revive yourself (assuming that you died)
 Use the B button to mute the game or turn the sound back on
 
   ~Goal Of The Game~
 The goal of the game is to collect all 64 coins
 
 ~Levels~
 
 Need 8 coins to pass a level.
 
 Levels 1-3: Enemies from left
 Level 4: Boss
 Levels 5-7: Enemies from either side
 Level 8: Faster Boss

+-- Designed by Loading Games --+

*/

byte xc,yc;
byte ex,ey;
byte bx,by,bc;
byte cx,cy,Aux;
float time,savedTime,totalTime;
float time2,savedTime2,totalTime2;
float time3,savedTime3,totalTime3;
float time4,savedTime4,totalTime4;
byte pc,ec,cc,Xc,oc;
byte n;
byte wc01, wc02;
byte enemyY[3];
byte side;
byte blah;
byte score;

boolean Dead;
boolean GameStart;
boolean sound;
boolean hard;
boolean laser;
boolean bossLevel;
boolean next;
boolean champ;
boolean grid;

void setup(){
  MeggyJrSimpleSetup();
  xc = 5;
  yc = 5;
  ex = 0;
  ey = 4;
  time = millis();
  totalTime = 500;
  time2 = millis();
  totalTime2 = 50;
  time3 = millis();
  totalTime3 = 300;
  time4 = millis();
  totalTime4 = 200;
  cx = random(0,7);
  cy = 0;
  Aux = 1;
  EditColor(CustomColor1,15,3,0);
  EditColor(CustomColor9,5,13,5);
  EditColor(CustomColor8,15,0,2);
  pc = 5;
  ec = 1;
  cc = 17;
  n = 1;
  enemyY[0] = 4;
  wc01 = 5;
  wc02 = 12;
  GameStart = false;
  Dead = false;
  sound = true;
  Xc = 1;
  oc = 8;
  side = 0;
  hard = false;
  bx = 0;
  by = random(0,8);
  bc = 1;
  laser = false;
  bossLevel = false;
  blah = 4;
  score = 0;
  next = false;
  champ = false;
  grid = true;
}

void loop()
{
  
  if(GameStart == false)
  {
    
  Beginning();
  
  }else{
  
  SetAuxLEDs(Aux*2-1);
  
    side0();
    side1();
    
    if(!Dead){
    boss();
    }
  
  timeStuff();
  
   DrawPx(xc,yc,pc);
   DrawPx(cx,cy,cc);
   
  if(Dead == false)
  {
     
    
    controls();
    


 coinCollectionProcess();
 
  enemyMovement();
  
   }else if(Dead == true){
     
     dead();
     
     restart();
     
   }
   }
   
  death();
  
  misc();
  DisplaySlate();
  ClearSlate();
}


void Beginning(){
  
  DrawPx(2,7,Orange);
  DrawPx(3,7,Orange);
  DrawPx(4,7,Orange);
  DrawPx(5,7,Orange);
  DrawPx(5,6,Orange);
  DrawPx(6,6,Orange);
  DrawPx(6,5,Orange);
  DrawPx(7,5,Orange);
  DrawPx(7,4,Orange);
  DrawPx(7,3,Orange);
  DrawPx(7,2,Orange);
  DrawPx(6,2,Orange);
  DrawPx(6,1,Orange);
  DrawPx(5,1,Orange);
  DrawPx(5,0,Orange);
  DrawPx(4,0,Orange);
  DrawPx(3,0,Orange);
  DrawPx(2,0,Orange);
  DrawPx(2,1,Orange);
  DrawPx(1,1,Orange);
  DrawPx(1,2,Orange);
  DrawPx(0,2,Orange);
  DrawPx(0,3,Orange);
  DrawPx(0,4,Orange);
  DrawPx(0,5,Orange);
  DrawPx(1,5,Orange);
  DrawPx(1,6,Orange);
  DrawPx(2,6,Orange);
  
  DrawPx(3,6,DimYellow);
  DrawPx(4,6,DimYellow);
  DrawPx(2,5,Red);
  DrawPx(3,5,Red);
  DrawPx(4,5,Red);
  DrawPx(5,5,Red);
  DrawPx(1,4,DimYellow);
  DrawPx(2,4,Red);
  DrawPx(3,4,DimYellow);
  DrawPx(4,4,DimYellow);
  DrawPx(5,4,DimYellow);
  DrawPx(6,4,DimYellow);
  DrawPx(1,3,DimYellow);
  DrawPx(2,3,Red);
  DrawPx(3,3,DimYellow);
  DrawPx(4,3,DimYellow);
  DrawPx(5,3,DimYellow);
  DrawPx(6,3,DimYellow);
  DrawPx(2,2,Red);
  DrawPx(3,2,Red);
  DrawPx(4,2,Red);
  DrawPx(5,2,Red);
  DrawPx(3,1,DimYellow);
  DrawPx(4,1,DimYellow);
  
  CheckButtonsPress();
  
  if(Button_A)
  {
    Tone_Start(65000,300);
    Tone_Start(1500,400);
    GameStart = true;
  }
}


void boss(){
  
  if(!Dead){
    
  if(bossLevel){
    
  DrawPx(bx,by,bc);
  bc += 1;
  
  if(laser){
    DrawPx(1,by,1);
    DrawPx(2,by,1);
    DrawPx(3,by,1);
    DrawPx(4,by,1);
    DrawPx(5,by,1);
    DrawPx(6,by,1);
    DrawPx(7,by,1);
    
    bossDeath();
    
  }else if(ex < blah){
    by = random(1,7);
  }
  }
  }
}


void bossDeath(){
  
  if(yc == by){
    Dead = true;
    dead();
  }
  
}


void coinCollectionProcess(){
  
  if(xc == cx && yc == cy)
 {
   score += 1;
   
   if(Aux*2-1 == 255)
   {
     
     n++;
     if(bossLevel){
       hard = true;
       blah = 5;
       n = 1;
       bossLevel = false;
     }
     if(n == 4){
       bossLevel = true;
       hard = false;
       n = 1;
     }
     totalTime = 500;
     Aux = 1;
     
   }else{
   Aux *= 2;
   totalTime -= 55;
   }
   
   cx = random(0,8);
   if(sound)
   {
   Tone_Start(65000,300);
   Tone_Start(1500,400);
   }
   if(cy == 7)
   {
     cy = 0;
   }else{
     cy = 7;
   }
 }
 
}


void coinGrid(){
  
  if(sound){
  
    ClearSlate();
    DisplaySlate();
    
    if(score == 64){
      if(grid){
      
    DrawPx(0,7,cc);
    DisplaySlate();
    Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,7,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,6,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,5,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,4,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,3,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,2,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,1,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(0,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(1,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(2,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(3,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(4,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(5,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(6,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);      delay(500);
    DrawPx(7,0,cc);
    DisplaySlate();     Tone_Start(65000,300);    Tone_Start(1500,400);
    grid = false;

    ClearSlate();
    DisplaySlate();
    
    }
    }
    
  }
  
  if(!sound){
    
    ClearSlate();
    DisplaySlate();
    
    if(score == 64){
      if(grid){
      
    DrawPx(0,7,cc);
    DisplaySlate();
    delay(500);
    DrawPx(1,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,7,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,6,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,5,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,4,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,3,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,2,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,1,cc);
    DisplaySlate();     delay(500);
    DrawPx(0,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(1,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(2,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(3,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(4,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(5,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(6,0,cc);
    DisplaySlate();     delay(500);
    DrawPx(7,0,cc);
    DisplaySlate();
    grid = false;
    
    ClearSlate();
    DisplaySlate();
    
    }
    }
    
  }
    
  }
      
      
      
      void controls(){
  
  CheckButtonsPress();
  
  
  
  if(Button_Down)
  {
    if (yc > 0){
      yc--;
    }
    DrawPx(xc,yc,pc);
    if(sound)
    {
    Tone_Start(50000,100);
    }
    delay(30);
    
    
  }else if(Button_Up)
  {
    if (yc < 7){
      yc++;
    }
    
    DrawPx(xc,yc,pc);
    if(sound)
    {
    Tone_Start(12500,100);
    }
    delay(30);
    
  }else if(Button_Right)
  {
    if (xc < 7){
      xc++;
    }
    
    DrawPx(xc,yc,pc);
    if(sound)
    {
    Tone_Start(25000,100);
    }
    delay(30);
    
    
  }else if(Button_Left)
  {
    if (xc > 0){
      xc--;
    }
    
    DrawPx(xc,yc,pc);
    if(sound)
    {
    Tone_Start(37500,100);
    }
    delay(30);
    
  }else if(Button_B)
  {
    if(sound)
    {
      sound = false;
    }else{
      sound = true;
    }
  }else if(Button_A)
  {
    if(xc == 7 && yc == 7){
      n = 3;
    }
  }
  
}


void dead(){
  if(!next){
    
    misc();
    
    explosion();
    
    CheckButtonsPress;
    
    if(Button_A){
      next = true;
    }
    }
  
  if(next){
    
ClearSlate();
       
      coinGrid();

      scoreCount();
      
    }
  }
  
  
  void death(){
  
  for(int i = 0; i < n; i++){ 
   
    if(!bossLevel){
  if(xc == ex && yc == enemyY[i]){
    
    dead();
     
    Dead = true;
  }
    }
  }
  
  if(score == 64){
    next = true;
    champ = true;
    Dead = true;
    dead();
  }
  
}


void enemyMovement(){
  
  if(!Dead){
  
  if(savedTime > totalTime){

    if(side == 0){
    if(ex < 8){
    ex += 1;
    }
    if( ex > 6){
      laser = true;
    }else{
      laser = false;
    }
   time = millis();
   
  }else if(side == 1){
    if(ex > 0){
      
    ex -= 1;
    }else{
      side = random(0,2);
    if(side == 0){
      ex = 0;
    }else if(side == 1){
      ex = 7;
    }
    }
   time = millis();
  }
  }
  
  }
  
}


void explosion(){
  
  if(sound){
    
    Tone_Start(1,1);
    Tone_Start(65000,1);
    Tone_Start(30000,1);
    
  }
  
  ClearSlate;
  
    DrawPx(0,0,Xc);
    DrawPx(0,1,Xc);
    DrawPx(0,2,Xc);
    DrawPx(0,3,Xc);
    DrawPx(0,4,Xc);
    DrawPx(0,5,Xc);
    DrawPx(0,6,Xc);
    DrawPx(0,7,Xc);
    DrawPx(7,0,Xc);
    DrawPx(7,1,Xc);
    DrawPx(7,2,Xc);
    DrawPx(7,3,Xc);
    DrawPx(7,4,Xc);
    DrawPx(7,5,Xc);
    DrawPx(7,6,Xc);
    DrawPx(7,7,Xc);
    DrawPx(0,0,Xc);
    DrawPx(1,0,Xc);
    DrawPx(2,0,Xc);
    DrawPx(3,0,Xc);
    DrawPx(4,0,Xc);
    DrawPx(5,0,Xc);
    DrawPx(6,0,Xc);
    DrawPx(7,0,Xc);
    DrawPx(0,7,Xc);
    DrawPx(1,7,Xc);
    DrawPx(2,7,Xc);
    DrawPx(3,7,Xc);
    DrawPx(4,7,Xc);
    DrawPx(5,7,Xc);
    DrawPx(6,7,Xc);
    DrawPx(7,7,Xc);
    
    DrawPx(1,1,oc);
    DrawPx(1,2,oc);
    DrawPx(1,3,oc);
    DrawPx(1,4,oc);
    DrawPx(1,5,oc);
    DrawPx(1,6,oc);
    DrawPx(6,1,oc);
    DrawPx(6,2,oc);
    DrawPx(6,3,oc);
    DrawPx(6,4,oc);
    DrawPx(6,5,oc);
    DrawPx(6,6,oc);
    DrawPx(1,1,oc);
    DrawPx(2,1,oc);
    DrawPx(3,1,oc);
    DrawPx(4,1,oc);
    DrawPx(5,1,oc);
    DrawPx(6,1,oc);
    DrawPx(1,6,oc);
    DrawPx(2,6,oc);
    DrawPx(3,6,oc);
    DrawPx(4,6,oc);
    DrawPx(5,6,oc);
    DrawPx(6,6,oc);
    
    DrawPx(2,2,Xc);
    DrawPx(2,3,Xc);
    DrawPx(2,4,Xc);
    DrawPx(2,5,Xc);
    DrawPx(5,2,Xc);
    DrawPx(5,3,Xc);
    DrawPx(5,4,Xc);
    DrawPx(5,5,Xc);
    DrawPx(2,2,Xc);
    DrawPx(3,2,Xc);
    DrawPx(4,2,Xc);
    DrawPx(5,2,Xc);
    DrawPx(2,5,Xc);
    DrawPx(3,5,Xc);
    DrawPx(4,5,Xc);
    DrawPx(5,5,Xc);
    
    DrawPx(3,3,oc);
    DrawPx(3,4,oc);
    DrawPx(4,3,oc);
    DrawPx(4,4,oc);
    DrawPx(3,3,oc);
    DrawPx(4,3,oc);
    DrawPx(3,4,oc);
    DrawPx(4,4,oc);
    
    ClearSlate;
    
}


void misc(){

    if(savedTime2 > totalTime2)
    {
      if(Xc == 0)
      {
        Xc = 1;
      }else if(Xc == 1)
      {
        Xc = 0;
      }
      
      time2 = millis();
    }
    
    if(savedTime3 > totalTime3)
    {
      if(oc == 0)
      {
        oc = 8;
      }else if(oc == 8)
      {
        oc = 0;
      }
      
      time3 = millis();
    }
  
}


void restart(){
  
  CheckButtonsPress();
  
  if(next){

     if(Button_A){
       if(Dead == true){
       ClearSlate();
       Dead = false;
       xc = 5;
       yc = 5;
       ex = 0;
       ey = 5;
       Aux = 1;
       cx = random(0,7);
       cy = 0;
       totalTime = 500;
       n = 1;
       side = 0;
       hard = false;
       bossLevel = false;
       score = 0;
       blah = 4;
       next = false;
       grid = true;
       if(champ){
         GameStart = false;
       }
     }
     }
  }
}


void scoreCount(){

      if(score >= 60){
         DrawPx(2,7,cc);
         DrawPx(1,7,cc);
         DrawPx(0,7,cc);
         DrawPx(0,6,cc);
         DrawPx(0,5,cc);
         DrawPx(0,4,cc);
         DrawPx(0,3,cc);
         DrawPx(0,2,cc);
         DrawPx(0,1,cc);
         DrawPx(1,1,cc);
         DrawPx(2,1,cc);
         DrawPx(2,2,cc);
         DrawPx(2,3,cc);
         DrawPx(1,3,cc);
         
         
        if(score - 60 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 60 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 60 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 60 == 4){
           
         DrawPx(2,7,bc);
         DrawPx(1,7,bc);
         DrawPx(0,7,bc);
         DrawPx(0,6,bc);
         DrawPx(0,5,bc);
         DrawPx(0,4,bc);
         DrawPx(0,3,bc);
         DrawPx(0,2,bc);
         DrawPx(0,1,bc);
         DrawPx(1,1,bc);
         DrawPx(2,1,bc);
         DrawPx(2,2,bc);
         DrawPx(2,3,bc);
         DrawPx(1,3,bc);
           
         DrawPx(7,1,bc);
         DrawPx(5,6,bc);
         DrawPx(5,7,bc);
         DrawPx(5,6,bc);
         DrawPx(5,5,bc);
         DrawPx(6,5,bc);
         DrawPx(7,5,bc);
         DrawPx(7,4,bc);
         DrawPx(7,3,bc);
         DrawPx(7,2,bc);
         DrawPx(7,6,bc);
         DrawPx(7,7,bc);
         
         bc += 1;
         }
         
         
       }else if(score >= 50){
         DrawPx(2,7,cc);
         DrawPx(1,7,cc);
         DrawPx(0,7,cc);
         DrawPx(0,6,cc);
         DrawPx(0,5,cc);
         DrawPx(1,5,cc);
         DrawPx(2,5,cc);
         DrawPx(2,4,cc);
         DrawPx(2,3,cc);
         DrawPx(1,3,cc);
         DrawPx(0,3,cc);
         
         if(score - 50 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 50 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 50 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 50 == 4){
         DrawPx(7,1,cc);
         DrawPx(5,6,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(7,2,cc);
         DrawPx(7,6,cc);
         DrawPx(7,7,cc);
         
         }else if(score - 50 == 5){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 50 == 6){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(5,2,cc);
         DrawPx(5,1,cc);
         DrawPx(6,1,cc);
         DrawPx(7,1,cc);
         DrawPx(7,2,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 50 == 7){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,4,cc);
         DrawPx(6,3,cc);
         DrawPx(6,2,cc);
         DrawPx(6,1,cc);
         
         }else if(score - 50 == 8){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 50 == 9){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 50 == 0){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         }
         
         
       }else if(score >= 40){
         DrawPx(2,1,cc);
         DrawPx(0,6,cc);
         DrawPx(0,7,cc);
         DrawPx(0,6,cc);
         DrawPx(0,5,cc);
         DrawPx(1,5,cc);
         DrawPx(2,5,cc);
         DrawPx(2,4,cc);
         DrawPx(2,3,cc);
         DrawPx(2,2,cc);
         DrawPx(2,6,cc);
         DrawPx(2,7,cc);
         
         if(score - 40 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 40 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 40 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 40 == 4){
         DrawPx(7,1,cc);
         DrawPx(5,6,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(7,2,cc);
         DrawPx(7,6,cc);
         DrawPx(7,7,cc);
         
         }else if(score - 40 == 5){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 40 == 6){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(5,2,cc);
         DrawPx(5,1,cc);
         DrawPx(6,1,cc);
         DrawPx(7,1,cc);
         DrawPx(7,2,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 40 == 7){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,4,cc);
         DrawPx(6,3,cc);
         DrawPx(6,2,cc);
         DrawPx(6,1,cc);
         
         }else if(score - 40 == 8){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 40 == 9){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 40 == 0){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         }
         
         
       }else if(score >= 30){
         DrawPx(2,7,cc);
         DrawPx(1,7,cc);
         DrawPx(0,7,cc);
         DrawPx(2,6,cc);
         DrawPx(2,5,cc);
         DrawPx(1,5,cc);
         DrawPx(0,5,cc);
         DrawPx(2,5,cc);
         DrawPx(2,4,cc);
         DrawPx(2,3,cc);
         DrawPx(1,3,cc);
         DrawPx(0,3,cc);
         
         if(score - 30 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 30 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 30 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 30 == 4){
         DrawPx(7,1,cc);
         DrawPx(5,6,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(7,2,cc);
         DrawPx(7,6,cc);
         DrawPx(7,7,cc);
         
         }else if(score - 30 == 5){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 30 == 6){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(5,2,cc);
         DrawPx(5,1,cc);
         DrawPx(6,1,cc);
         DrawPx(7,1,cc);
         DrawPx(7,2,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 30 == 7){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,4,cc);
         DrawPx(6,3,cc);
         DrawPx(6,2,cc);
         DrawPx(6,1,cc);
         
         }else if(score - 30 == 8){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 30 == 9){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 30 == 0){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         }
         
         
       }else if(score >= 20){
         DrawPx(2,7,cc);
         DrawPx(1,7,cc);
         DrawPx(0,7,cc);
         DrawPx(2,6,cc);
         DrawPx(2,5,cc);
         DrawPx(1,5,cc);
         DrawPx(0,5,cc);
         DrawPx(0,4,cc);
         DrawPx(0,3,cc);
         DrawPx(2,3,cc);
         DrawPx(1,3,cc);
         
         if(score - 20 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 20 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 20 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 20 == 4){
         DrawPx(7,1,cc);
         DrawPx(5,6,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(7,2,cc);
         DrawPx(7,6,cc);
         DrawPx(7,7,cc);
         
         }else if(score - 20 == 5){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 20 == 6){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(5,2,cc);
         DrawPx(5,1,cc);
         DrawPx(6,1,cc);
         DrawPx(7,1,cc);
         DrawPx(7,2,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 20 == 7){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,4,cc);
         DrawPx(6,3,cc);
         DrawPx(6,2,cc);
         DrawPx(6,1,cc);
         
         }else if(score - 20 == 8){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 20 == 9){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 20 == 0){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         }
         
         
       }else if(score >= 10){
         DrawPx(2,7,cc);
         DrawPx(2,6,cc);
         DrawPx(2,5,cc);
         DrawPx(2,4,cc);
         DrawPx(2,3,cc);
         
         if(score - 10 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 10 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 10 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 10 == 4){
         DrawPx(7,1,cc);
         DrawPx(5,6,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(7,2,cc);
         DrawPx(7,6,cc);
         DrawPx(7,7,cc);
         
         }else if(score - 10 == 5){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 10 == 6){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(5,2,cc);
         DrawPx(5,1,cc);
         DrawPx(6,1,cc);
         DrawPx(7,1,cc);
         DrawPx(7,2,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 10 == 7){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,4,cc);
         DrawPx(6,3,cc);
         DrawPx(6,2,cc);
         DrawPx(6,1,cc);
         
         }else if(score - 10 == 8){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 10 == 9){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 10 == 0){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         }
       }else if(score >= 0){
         if(score - 0 == 1){
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 0 == 2){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 0 == 3){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 0 == 4){
         DrawPx(7,1,cc);
         DrawPx(5,6,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(7,2,cc);
         DrawPx(7,6,cc);
         DrawPx(7,7,cc);
         
         }else if(score - 0 == 5){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(6,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         DrawPx(5,3,cc);
         
         }else if(score - 0 == 6){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(5,5,cc);
         DrawPx(5,4,cc);
         DrawPx(5,3,cc);
         DrawPx(5,2,cc);
         DrawPx(5,1,cc);
         DrawPx(6,1,cc);
         DrawPx(7,1,cc);
         DrawPx(7,2,cc);
         DrawPx(7,3,cc);
         DrawPx(6,3,cc);
         
         }else if(score - 0 == 7){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(7,6,cc);
         DrawPx(7,5,cc);
         DrawPx(6,4,cc);
         DrawPx(6,3,cc);
         DrawPx(6,2,cc);
         DrawPx(6,1,cc);
         
         }else if(score - 0 == 8){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 0 == 9){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(6,5,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         
         }else if(score - 0 == 0){
         DrawPx(7,7,cc);
         DrawPx(6,7,cc);
         DrawPx(5,7,cc);
         DrawPx(5,6,cc);
         DrawPx(7,6,cc);
         DrawPx(5,5,cc);
         DrawPx(7,5,cc);
         DrawPx(5,4,cc);
         DrawPx(7,4,cc);
         DrawPx(5,3,cc);
         DrawPx(6,3,cc);
         DrawPx(7,3,cc);
         }
       }
       
       }
       
       
       void side0(){
    
  for(int i = 0; i < n; i++)
  {
  if(side == 0){
if(ex < 8)
{
  
}else{
  
    enemyY[0] = random(1,7);
    enemyY[1] = random(1,7);
    enemyY[2] = random(1,7);
    
    if(enemyY[0] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[0] = random(enemyY[1]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[2]){
      if(enemyY[2] < 5){
        enemyY[0] = random(enemyY[2]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[2]);
    }
    }
    if(enemyY[2] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[2] = random(enemyY[1]+1,7);
      }else{
        enemyY[2] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[0] = random(enemyY[1]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[2]){
      if(enemyY[2] < 5){
        enemyY[0] = random(enemyY[2]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[2]);
    }
    }
    if(enemyY[2] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[2] = random(enemyY[1]+1,7);
      }else{
        enemyY[2] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[0] = random(enemyY[1]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[2]){
      if(enemyY[2] < 5){
        enemyY[0] = random(enemyY[2]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[2]);
    }
    }
    if(enemyY[2] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[2] = random(enemyY[1]+1,7);
      }else{
        enemyY[2] = random(1,enemyY[1]);
    }
    }
    
    
    if(xc == ex && yc == enemyY[i])
    {
     Dead = true; 
    }else{
      Dead = false;
    }
    
    if(hard){
    side = random(0,2);
    if(side == 0){
      ex = 0;
    }else if(side == 1){
      ex = 7;
    }
    }else{
      ex = 0;
    }
}
if(!bossLevel){
DrawPx(ex,enemyY[i],ec);
}
  }
  }
}


void side1(){
  
  for(int i = 0; i < n; i++)
  {
        if(side == 1){
    if(ex > -1)
{
  
}else{
  
    enemyY[0] = random(1,7);
    enemyY[1] = random(1,7);
    enemyY[2] = random(1,7);
    
    if(enemyY[0] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[0] = random(enemyY[1]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[2]){
      if(enemyY[2] < 5){
        enemyY[0] = random(enemyY[2]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[2]);
    }
    }
    if(enemyY[2] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[2] = random(enemyY[1]+1,7);
      }else{
        enemyY[2] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[0] = random(enemyY[1]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[2]){
      if(enemyY[2] < 5){
        enemyY[0] = random(enemyY[2]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[2]);
    }
    }
    if(enemyY[2] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[2] = random(enemyY[1]+1,7);
      }else{
        enemyY[2] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[0] = random(enemyY[1]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[1]);
    }
    }
    if(enemyY[0] == enemyY[2]){
      if(enemyY[2] < 5){
        enemyY[0] = random(enemyY[2]+1,7);
      }else{
        enemyY[0] = random(1,enemyY[2]);
    }
    }
    if(enemyY[2] == enemyY[1]){
      if(enemyY[1] < 5){
        enemyY[2] = random(enemyY[1]+1,7);
      }else{
        enemyY[2] = random(1,enemyY[1]);
    }
    }
    
    if(xc == ex && yc == enemyY[i])
    {
     Dead = true; 
    }else{
      Dead = false;
    }
}
if(!bossLevel){
DrawPx(ex,enemyY[i],ec);
}
  }
  }
}


void timeStuff(){
  
  savedTime = millis() - time;
  savedTime2 = millis() - time2;
  savedTime3 = millis() - time3;
  savedTime4 = millis() - time4;
  
}
